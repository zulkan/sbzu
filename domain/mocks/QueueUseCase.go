// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// QueueUseCase is an autogenerated mock type for the QueueUseCase type
type QueueUseCase struct {
	mock.Mock
}

// GetTopicName provides a mock function with given fields: ctx
func (_m *QueueUseCase) GetTopicName(ctx context.Context) string {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PublishMessage provides a mock function with given fields: ctx, key, value
func (_m *QueueUseCase) PublishMessage(ctx context.Context, key string, value string) error {
	ret := _m.Called(ctx, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadMessage provides a mock function with given fields: ctx
func (_m *QueueUseCase) ReadMessage(ctx context.Context) (string, string, error) {
	ret := _m.Called(ctx)

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) string); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewQueueUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueueUseCase creates a new instance of QueueUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueueUseCase(t mockConstructorTestingTNewQueueUseCase) *QueueUseCase {
	mock := &QueueUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
